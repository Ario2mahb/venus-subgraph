// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from '@graphprotocol/graph-ts'

export class ActionPaused extends ethereum.Event {
  get params(): ActionPaused__Params {
    return new ActionPaused__Params(this)
  }
}

export class ActionPaused__Params {
  _event: ActionPaused

  constructor(event: ActionPaused) {
    this._event = event
  }

  get action(): string {
    return this._event.parameters[0].value.toString()
  }

  get pauseState(): boolean {
    return this._event.parameters[1].value.toBoolean()
  }
}

export class ActionPausedMarket extends ethereum.Event {
  get params(): ActionPausedMarket__Params {
    return new ActionPausedMarket__Params(this)
  }
}

export class ActionPausedMarket__Params {
  _event: ActionPausedMarket

  constructor(event: ActionPausedMarket) {
    this._event = event
  }

  get vToken(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get action(): string {
    return this._event.parameters[1].value.toString()
  }

  get pauseState(): boolean {
    return this._event.parameters[2].value.toBoolean()
  }
}

export class ActionProtocolPaused extends ethereum.Event {
  get params(): ActionProtocolPaused__Params {
    return new ActionProtocolPaused__Params(this)
  }
}

export class ActionProtocolPaused__Params {
  _event: ActionProtocolPaused

  constructor(event: ActionProtocolPaused) {
    this._event = event
  }

  get state(): boolean {
    return this._event.parameters[0].value.toBoolean()
  }
}

export class DistributedBorrowerVenus extends ethereum.Event {
  get params(): DistributedBorrowerVenus__Params {
    return new DistributedBorrowerVenus__Params(this)
  }
}

export class DistributedBorrowerVenus__Params {
  _event: DistributedBorrowerVenus

  constructor(event: DistributedBorrowerVenus) {
    this._event = event
  }

  get vToken(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get venusDelta(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }

  get venusBorrowIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt()
  }
}

export class DistributedSupplierVenus extends ethereum.Event {
  get params(): DistributedSupplierVenus__Params {
    return new DistributedSupplierVenus__Params(this)
  }
}

export class DistributedSupplierVenus__Params {
  _event: DistributedSupplierVenus

  constructor(event: DistributedSupplierVenus) {
    this._event = event
  }

  get vToken(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get supplier(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get venusDelta(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }

  get venusSupplyIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt()
  }
}

export class DistributedVAIMinterVenus extends ethereum.Event {
  get params(): DistributedVAIMinterVenus__Params {
    return new DistributedVAIMinterVenus__Params(this)
  }
}

export class DistributedVAIMinterVenus__Params {
  _event: DistributedVAIMinterVenus

  constructor(event: DistributedVAIMinterVenus) {
    this._event = event
  }

  get vaiMinter(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get venusDelta(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }

  get venusVAIMintIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class DistributedVAIVaultVenus extends ethereum.Event {
  get params(): DistributedVAIVaultVenus__Params {
    return new DistributedVAIVaultVenus__Params(this)
  }
}

export class DistributedVAIVaultVenus__Params {
  _event: DistributedVAIVaultVenus

  constructor(event: DistributedVAIVaultVenus) {
    this._event = event
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }
}

export class Failure extends ethereum.Event {
  get params(): Failure__Params {
    return new Failure__Params(this)
  }
}

export class Failure__Params {
  _event: Failure

  constructor(event: Failure) {
    this._event = event
  }

  get error(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }

  get info(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }

  get detail(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class MarketEntered extends ethereum.Event {
  get params(): MarketEntered__Params {
    return new MarketEntered__Params(this)
  }
}

export class MarketEntered__Params {
  _event: MarketEntered

  constructor(event: MarketEntered) {
    this._event = event
  }

  get vToken(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress()
  }
}

export class MarketExited extends ethereum.Event {
  get params(): MarketExited__Params {
    return new MarketExited__Params(this)
  }
}

export class MarketExited__Params {
  _event: MarketExited

  constructor(event: MarketExited) {
    this._event = event
  }

  get vToken(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress()
  }
}

export class MarketListed extends ethereum.Event {
  get params(): MarketListed__Params {
    return new MarketListed__Params(this)
  }
}

export class MarketListed__Params {
  _event: MarketListed

  constructor(event: MarketListed) {
    this._event = event
  }

  get vToken(): Address {
    return this._event.parameters[0].value.toAddress()
  }
}

export class NewBorrowCap extends ethereum.Event {
  get params(): NewBorrowCap__Params {
    return new NewBorrowCap__Params(this)
  }
}

export class NewBorrowCap__Params {
  _event: NewBorrowCap

  constructor(event: NewBorrowCap) {
    this._event = event
  }

  get vToken(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get newBorrowCap(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class NewBorrowCapGuardian extends ethereum.Event {
  get params(): NewBorrowCapGuardian__Params {
    return new NewBorrowCapGuardian__Params(this)
  }
}

export class NewBorrowCapGuardian__Params {
  _event: NewBorrowCapGuardian

  constructor(event: NewBorrowCapGuardian) {
    this._event = event
  }

  get oldBorrowCapGuardian(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get newBorrowCapGuardian(): Address {
    return this._event.parameters[1].value.toAddress()
  }
}

export class NewCloseFactor extends ethereum.Event {
  get params(): NewCloseFactor__Params {
    return new NewCloseFactor__Params(this)
  }
}

export class NewCloseFactor__Params {
  _event: NewCloseFactor

  constructor(event: NewCloseFactor) {
    this._event = event
  }

  get oldCloseFactorMantissa(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }

  get newCloseFactorMantissa(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class NewCollateralFactor extends ethereum.Event {
  get params(): NewCollateralFactor__Params {
    return new NewCollateralFactor__Params(this)
  }
}

export class NewCollateralFactor__Params {
  _event: NewCollateralFactor

  constructor(event: NewCollateralFactor) {
    this._event = event
  }

  get vToken(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get oldCollateralFactorMantissa(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }

  get newCollateralFactorMantissa(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class NewComptrollerLens extends ethereum.Event {
  get params(): NewComptrollerLens__Params {
    return new NewComptrollerLens__Params(this)
  }
}

export class NewComptrollerLens__Params {
  _event: NewComptrollerLens

  constructor(event: NewComptrollerLens) {
    this._event = event
  }

  get oldComptrollerLens(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get newComptrollerLens(): Address {
    return this._event.parameters[1].value.toAddress()
  }
}

export class NewLiquidationIncentive extends ethereum.Event {
  get params(): NewLiquidationIncentive__Params {
    return new NewLiquidationIncentive__Params(this)
  }
}

export class NewLiquidationIncentive__Params {
  _event: NewLiquidationIncentive

  constructor(event: NewLiquidationIncentive) {
    this._event = event
  }

  get oldLiquidationIncentiveMantissa(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }

  get newLiquidationIncentiveMantissa(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class NewLiquidatorContract extends ethereum.Event {
  get params(): NewLiquidatorContract__Params {
    return new NewLiquidatorContract__Params(this)
  }
}

export class NewLiquidatorContract__Params {
  _event: NewLiquidatorContract

  constructor(event: NewLiquidatorContract) {
    this._event = event
  }

  get oldLiquidatorContract(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get newLiquidatorContract(): Address {
    return this._event.parameters[1].value.toAddress()
  }
}

export class NewPauseGuardian extends ethereum.Event {
  get params(): NewPauseGuardian__Params {
    return new NewPauseGuardian__Params(this)
  }
}

export class NewPauseGuardian__Params {
  _event: NewPauseGuardian

  constructor(event: NewPauseGuardian) {
    this._event = event
  }

  get oldPauseGuardian(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get newPauseGuardian(): Address {
    return this._event.parameters[1].value.toAddress()
  }
}

export class NewPriceOracle extends ethereum.Event {
  get params(): NewPriceOracle__Params {
    return new NewPriceOracle__Params(this)
  }
}

export class NewPriceOracle__Params {
  _event: NewPriceOracle

  constructor(event: NewPriceOracle) {
    this._event = event
  }

  get oldPriceOracle(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get newPriceOracle(): Address {
    return this._event.parameters[1].value.toAddress()
  }
}

export class NewTreasuryAddress extends ethereum.Event {
  get params(): NewTreasuryAddress__Params {
    return new NewTreasuryAddress__Params(this)
  }
}

export class NewTreasuryAddress__Params {
  _event: NewTreasuryAddress

  constructor(event: NewTreasuryAddress) {
    this._event = event
  }

  get oldTreasuryAddress(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get newTreasuryAddress(): Address {
    return this._event.parameters[1].value.toAddress()
  }
}

export class NewTreasuryGuardian extends ethereum.Event {
  get params(): NewTreasuryGuardian__Params {
    return new NewTreasuryGuardian__Params(this)
  }
}

export class NewTreasuryGuardian__Params {
  _event: NewTreasuryGuardian

  constructor(event: NewTreasuryGuardian) {
    this._event = event
  }

  get oldTreasuryGuardian(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get newTreasuryGuardian(): Address {
    return this._event.parameters[1].value.toAddress()
  }
}

export class NewTreasuryPercent extends ethereum.Event {
  get params(): NewTreasuryPercent__Params {
    return new NewTreasuryPercent__Params(this)
  }
}

export class NewTreasuryPercent__Params {
  _event: NewTreasuryPercent

  constructor(event: NewTreasuryPercent) {
    this._event = event
  }

  get oldTreasuryPercent(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }

  get newTreasuryPercent(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class NewVAIController extends ethereum.Event {
  get params(): NewVAIController__Params {
    return new NewVAIController__Params(this)
  }
}

export class NewVAIController__Params {
  _event: NewVAIController

  constructor(event: NewVAIController) {
    this._event = event
  }

  get oldVAIController(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get newVAIController(): Address {
    return this._event.parameters[1].value.toAddress()
  }
}

export class NewVAIMintRate extends ethereum.Event {
  get params(): NewVAIMintRate__Params {
    return new NewVAIMintRate__Params(this)
  }
}

export class NewVAIMintRate__Params {
  _event: NewVAIMintRate

  constructor(event: NewVAIMintRate) {
    this._event = event
  }

  get oldVAIMintRate(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }

  get newVAIMintRate(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class NewVAIVaultInfo extends ethereum.Event {
  get params(): NewVAIVaultInfo__Params {
    return new NewVAIVaultInfo__Params(this)
  }
}

export class NewVAIVaultInfo__Params {
  _event: NewVAIVaultInfo

  constructor(event: NewVAIVaultInfo) {
    this._event = event
  }

  get vault_(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get releaseStartBlock_(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }

  get releaseInterval_(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class NewVenusVAIRate extends ethereum.Event {
  get params(): NewVenusVAIRate__Params {
    return new NewVenusVAIRate__Params(this)
  }
}

export class NewVenusVAIRate__Params {
  _event: NewVenusVAIRate

  constructor(event: NewVenusVAIRate) {
    this._event = event
  }

  get oldVenusVAIRate(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }

  get newVenusVAIRate(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class NewVenusVAIVaultRate extends ethereum.Event {
  get params(): NewVenusVAIVaultRate__Params {
    return new NewVenusVAIVaultRate__Params(this)
  }
}

export class NewVenusVAIVaultRate__Params {
  _event: NewVenusVAIVaultRate

  constructor(event: NewVenusVAIVaultRate) {
    this._event = event
  }

  get oldVenusVAIVaultRate(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }

  get newVenusVAIVaultRate(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class VenusGranted extends ethereum.Event {
  get params(): VenusGranted__Params {
    return new VenusGranted__Params(this)
  }
}

export class VenusGranted__Params {
  _event: VenusGranted

  constructor(event: VenusGranted) {
    this._event = event
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class VenusSpeedUpdated extends ethereum.Event {
  get params(): VenusSpeedUpdated__Params {
    return new VenusSpeedUpdated__Params(this)
  }
}

export class VenusSpeedUpdated__Params {
  _event: VenusSpeedUpdated

  constructor(event: VenusSpeedUpdated) {
    this._event = event
  }

  get vToken(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get newSpeed(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class Comptroller__getAccountLiquidityResult {
  value0: BigInt
  value1: BigInt
  value2: BigInt

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0
    this.value1 = value1
    this.value2 = value2
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>()
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0))
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1))
    map.set('value2', ethereum.Value.fromUnsignedBigInt(this.value2))
    return map
  }
}

export class Comptroller__getHypotheticalAccountLiquidityResult {
  value0: BigInt
  value1: BigInt
  value2: BigInt

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0
    this.value1 = value1
    this.value2 = value2
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>()
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0))
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1))
    map.set('value2', ethereum.Value.fromUnsignedBigInt(this.value2))
    return map
  }
}

export class Comptroller__liquidateCalculateSeizeTokensResult {
  value0: BigInt
  value1: BigInt

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0
    this.value1 = value1
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>()
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0))
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1))
    return map
  }
}

export class Comptroller__liquidateVAICalculateSeizeTokensResult {
  value0: BigInt
  value1: BigInt

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0
    this.value1 = value1
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>()
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0))
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1))
    return map
  }
}

export class Comptroller__marketsResult {
  value0: boolean
  value1: BigInt
  value2: boolean

  constructor(value0: boolean, value1: BigInt, value2: boolean) {
    this.value0 = value0
    this.value1 = value1
    this.value2 = value2
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>()
    map.set('value0', ethereum.Value.fromBoolean(this.value0))
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1))
    map.set('value2', ethereum.Value.fromBoolean(this.value2))
    return map
  }
}

export class Comptroller__venusBorrowStateResult {
  value0: BigInt
  value1: BigInt

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0
    this.value1 = value1
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>()
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0))
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1))
    return map
  }
}

export class Comptroller__venusSupplyStateResult {
  value0: BigInt
  value1: BigInt

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0
    this.value1 = value1
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>()
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0))
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1))
    return map
  }
}

export class Comptroller extends ethereum.SmartContract {
  static bind(address: Address): Comptroller {
    return new Comptroller('Comptroller', address)
  }

  _borrowGuardianPaused(): boolean {
    let result = super.call('_borrowGuardianPaused', '_borrowGuardianPaused():(bool)', [])

    return result[0].toBoolean()
  }

  try__borrowGuardianPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      '_borrowGuardianPaused',
      '_borrowGuardianPaused():(bool)',
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  _mintGuardianPaused(): boolean {
    let result = super.call('_mintGuardianPaused', '_mintGuardianPaused():(bool)', [])

    return result[0].toBoolean()
  }

  try__mintGuardianPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall('_mintGuardianPaused', '_mintGuardianPaused():(bool)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  _setCloseFactor(newCloseFactorMantissa: BigInt): BigInt {
    let result = super.call('_setCloseFactor', '_setCloseFactor(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(newCloseFactorMantissa),
    ])

    return result[0].toBigInt()
  }

  try__setCloseFactor(newCloseFactorMantissa: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('_setCloseFactor', '_setCloseFactor(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(newCloseFactorMantissa),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  _setCollateralFactor(vToken: Address, newCollateralFactorMantissa: BigInt): BigInt {
    let result = super.call(
      '_setCollateralFactor',
      '_setCollateralFactor(address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(vToken),
        ethereum.Value.fromUnsignedBigInt(newCollateralFactorMantissa),
      ],
    )

    return result[0].toBigInt()
  }

  try__setCollateralFactor(
    vToken: Address,
    newCollateralFactorMantissa: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      '_setCollateralFactor',
      '_setCollateralFactor(address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(vToken),
        ethereum.Value.fromUnsignedBigInt(newCollateralFactorMantissa),
      ],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  _setComptrollerLens(comptrollerLens_: Address): BigInt {
    let result = super.call(
      '_setComptrollerLens',
      '_setComptrollerLens(address):(uint256)',
      [ethereum.Value.fromAddress(comptrollerLens_)],
    )

    return result[0].toBigInt()
  }

  try__setComptrollerLens(comptrollerLens_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      '_setComptrollerLens',
      '_setComptrollerLens(address):(uint256)',
      [ethereum.Value.fromAddress(comptrollerLens_)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  _setLiquidationIncentive(newLiquidationIncentiveMantissa: BigInt): BigInt {
    let result = super.call(
      '_setLiquidationIncentive',
      '_setLiquidationIncentive(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(newLiquidationIncentiveMantissa)],
    )

    return result[0].toBigInt()
  }

  try__setLiquidationIncentive(
    newLiquidationIncentiveMantissa: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      '_setLiquidationIncentive',
      '_setLiquidationIncentive(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(newLiquidationIncentiveMantissa)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  _setPauseGuardian(newPauseGuardian: Address): BigInt {
    let result = super.call('_setPauseGuardian', '_setPauseGuardian(address):(uint256)', [
      ethereum.Value.fromAddress(newPauseGuardian),
    ])

    return result[0].toBigInt()
  }

  try__setPauseGuardian(newPauseGuardian: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      '_setPauseGuardian',
      '_setPauseGuardian(address):(uint256)',
      [ethereum.Value.fromAddress(newPauseGuardian)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  _setPriceOracle(newOracle: Address): BigInt {
    let result = super.call('_setPriceOracle', '_setPriceOracle(address):(uint256)', [
      ethereum.Value.fromAddress(newOracle),
    ])

    return result[0].toBigInt()
  }

  try__setPriceOracle(newOracle: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('_setPriceOracle', '_setPriceOracle(address):(uint256)', [
      ethereum.Value.fromAddress(newOracle),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  _setProtocolPaused(state: boolean): boolean {
    let result = super.call('_setProtocolPaused', '_setProtocolPaused(bool):(bool)', [
      ethereum.Value.fromBoolean(state),
    ])

    return result[0].toBoolean()
  }

  try__setProtocolPaused(state: boolean): ethereum.CallResult<boolean> {
    let result = super.tryCall('_setProtocolPaused', '_setProtocolPaused(bool):(bool)', [
      ethereum.Value.fromBoolean(state),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  _setTreasuryData(
    newTreasuryGuardian: Address,
    newTreasuryAddress: Address,
    newTreasuryPercent: BigInt,
  ): BigInt {
    let result = super.call(
      '_setTreasuryData',
      '_setTreasuryData(address,address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(newTreasuryGuardian),
        ethereum.Value.fromAddress(newTreasuryAddress),
        ethereum.Value.fromUnsignedBigInt(newTreasuryPercent),
      ],
    )

    return result[0].toBigInt()
  }

  try__setTreasuryData(
    newTreasuryGuardian: Address,
    newTreasuryAddress: Address,
    newTreasuryPercent: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      '_setTreasuryData',
      '_setTreasuryData(address,address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(newTreasuryGuardian),
        ethereum.Value.fromAddress(newTreasuryAddress),
        ethereum.Value.fromUnsignedBigInt(newTreasuryPercent),
      ],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  _setVAIController(vaiController_: Address): BigInt {
    let result = super.call('_setVAIController', '_setVAIController(address):(uint256)', [
      ethereum.Value.fromAddress(vaiController_),
    ])

    return result[0].toBigInt()
  }

  try__setVAIController(vaiController_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      '_setVAIController',
      '_setVAIController(address):(uint256)',
      [ethereum.Value.fromAddress(vaiController_)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  _setVAIMintRate(newVAIMintRate: BigInt): BigInt {
    let result = super.call('_setVAIMintRate', '_setVAIMintRate(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(newVAIMintRate),
    ])

    return result[0].toBigInt()
  }

  try__setVAIMintRate(newVAIMintRate: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('_setVAIMintRate', '_setVAIMintRate(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(newVAIMintRate),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  _supportMarket(vToken: Address): BigInt {
    let result = super.call('_supportMarket', '_supportMarket(address):(uint256)', [
      ethereum.Value.fromAddress(vToken),
    ])

    return result[0].toBigInt()
  }

  try__supportMarket(vToken: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('_supportMarket', '_supportMarket(address):(uint256)', [
      ethereum.Value.fromAddress(vToken),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  accountAssets(param0: Address, param1: BigInt): Address {
    let result = super.call('accountAssets', 'accountAssets(address,uint256):(address)', [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1),
    ])

    return result[0].toAddress()
  }

  try_accountAssets(param0: Address, param1: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      'accountAssets',
      'accountAssets(address,uint256):(address)',
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromUnsignedBigInt(param1)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  admin(): Address {
    let result = super.call('admin', 'admin():(address)', [])

    return result[0].toAddress()
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall('admin', 'admin():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  allMarkets(param0: BigInt): Address {
    let result = super.call('allMarkets', 'allMarkets(uint256):(address)', [
      ethereum.Value.fromUnsignedBigInt(param0),
    ])

    return result[0].toAddress()
  }

  try_allMarkets(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall('allMarkets', 'allMarkets(uint256):(address)', [
      ethereum.Value.fromUnsignedBigInt(param0),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  borrowAllowed(vToken: Address, borrower: Address, borrowAmount: BigInt): BigInt {
    let result = super.call(
      'borrowAllowed',
      'borrowAllowed(address,address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(vToken),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(borrowAmount),
      ],
    )

    return result[0].toBigInt()
  }

  try_borrowAllowed(
    vToken: Address,
    borrower: Address,
    borrowAmount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'borrowAllowed',
      'borrowAllowed(address,address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(vToken),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(borrowAmount),
      ],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  borrowCapGuardian(): Address {
    let result = super.call('borrowCapGuardian', 'borrowCapGuardian():(address)', [])

    return result[0].toAddress()
  }

  try_borrowCapGuardian(): ethereum.CallResult<Address> {
    let result = super.tryCall('borrowCapGuardian', 'borrowCapGuardian():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  borrowCaps(param0: Address): BigInt {
    let result = super.call('borrowCaps', 'borrowCaps(address):(uint256)', [
      ethereum.Value.fromAddress(param0),
    ])

    return result[0].toBigInt()
  }

  try_borrowCaps(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('borrowCaps', 'borrowCaps(address):(uint256)', [
      ethereum.Value.fromAddress(param0),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  borrowGuardianPaused(param0: Address): boolean {
    let result = super.call(
      'borrowGuardianPaused',
      'borrowGuardianPaused(address):(bool)',
      [ethereum.Value.fromAddress(param0)],
    )

    return result[0].toBoolean()
  }

  try_borrowGuardianPaused(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'borrowGuardianPaused',
      'borrowGuardianPaused(address):(bool)',
      [ethereum.Value.fromAddress(param0)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  checkMembership(account: Address, vToken: Address): boolean {
    let result = super.call(
      'checkMembership',
      'checkMembership(address,address):(bool)',
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(vToken)],
    )

    return result[0].toBoolean()
  }

  try_checkMembership(account: Address, vToken: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'checkMembership',
      'checkMembership(address,address):(bool)',
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(vToken)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  closeFactorMantissa(): BigInt {
    let result = super.call('closeFactorMantissa', 'closeFactorMantissa():(uint256)', [])

    return result[0].toBigInt()
  }

  try_closeFactorMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'closeFactorMantissa',
      'closeFactorMantissa():(uint256)',
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  comptrollerImplementation(): Address {
    let result = super.call(
      'comptrollerImplementation',
      'comptrollerImplementation():(address)',
      [],
    )

    return result[0].toAddress()
  }

  try_comptrollerImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      'comptrollerImplementation',
      'comptrollerImplementation():(address)',
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  comptrollerLens(): Address {
    let result = super.call('comptrollerLens', 'comptrollerLens():(address)', [])

    return result[0].toAddress()
  }

  try_comptrollerLens(): ethereum.CallResult<Address> {
    let result = super.tryCall('comptrollerLens', 'comptrollerLens():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  enterMarkets(vTokens: Array<Address>): Array<BigInt> {
    let result = super.call('enterMarkets', 'enterMarkets(address[]):(uint256[])', [
      ethereum.Value.fromAddressArray(vTokens),
    ])

    return result[0].toBigIntArray()
  }

  try_enterMarkets(vTokens: Array<Address>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall('enterMarkets', 'enterMarkets(address[]):(uint256[])', [
      ethereum.Value.fromAddressArray(vTokens),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigIntArray())
  }

  exitMarket(vTokenAddress: Address): BigInt {
    let result = super.call('exitMarket', 'exitMarket(address):(uint256)', [
      ethereum.Value.fromAddress(vTokenAddress),
    ])

    return result[0].toBigInt()
  }

  try_exitMarket(vTokenAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('exitMarket', 'exitMarket(address):(uint256)', [
      ethereum.Value.fromAddress(vTokenAddress),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  getAccountLiquidity(account: Address): Comptroller__getAccountLiquidityResult {
    let result = super.call(
      'getAccountLiquidity',
      'getAccountLiquidity(address):(uint256,uint256,uint256)',
      [ethereum.Value.fromAddress(account)],
    )

    return new Comptroller__getAccountLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    )
  }

  try_getAccountLiquidity(
    account: Address,
  ): ethereum.CallResult<Comptroller__getAccountLiquidityResult> {
    let result = super.tryCall(
      'getAccountLiquidity',
      'getAccountLiquidity(address):(uint256,uint256,uint256)',
      [ethereum.Value.fromAddress(account)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(
      new Comptroller__getAccountLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    )
  }

  getAllMarkets(): Array<Address> {
    let result = super.call('getAllMarkets', 'getAllMarkets():(address[])', [])

    return result[0].toAddressArray()
  }

  try_getAllMarkets(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall('getAllMarkets', 'getAllMarkets():(address[])', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddressArray())
  }

  getAssetsIn(account: Address): Array<Address> {
    let result = super.call('getAssetsIn', 'getAssetsIn(address):(address[])', [
      ethereum.Value.fromAddress(account),
    ])

    return result[0].toAddressArray()
  }

  try_getAssetsIn(account: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall('getAssetsIn', 'getAssetsIn(address):(address[])', [
      ethereum.Value.fromAddress(account),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddressArray())
  }

  getBlockNumber(): BigInt {
    let result = super.call('getBlockNumber', 'getBlockNumber():(uint256)', [])

    return result[0].toBigInt()
  }

  try_getBlockNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getBlockNumber', 'getBlockNumber():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  getHypotheticalAccountLiquidity(
    account: Address,
    vTokenModify: Address,
    redeemTokens: BigInt,
    borrowAmount: BigInt,
  ): Comptroller__getHypotheticalAccountLiquidityResult {
    let result = super.call(
      'getHypotheticalAccountLiquidity',
      'getHypotheticalAccountLiquidity(address,address,uint256,uint256):(uint256,uint256,uint256)',
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(vTokenModify),
        ethereum.Value.fromUnsignedBigInt(redeemTokens),
        ethereum.Value.fromUnsignedBigInt(borrowAmount),
      ],
    )

    return new Comptroller__getHypotheticalAccountLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    )
  }

  try_getHypotheticalAccountLiquidity(
    account: Address,
    vTokenModify: Address,
    redeemTokens: BigInt,
    borrowAmount: BigInt,
  ): ethereum.CallResult<Comptroller__getHypotheticalAccountLiquidityResult> {
    let result = super.tryCall(
      'getHypotheticalAccountLiquidity',
      'getHypotheticalAccountLiquidity(address,address,uint256,uint256):(uint256,uint256,uint256)',
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(vTokenModify),
        ethereum.Value.fromUnsignedBigInt(redeemTokens),
        ethereum.Value.fromUnsignedBigInt(borrowAmount),
      ],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(
      new Comptroller__getHypotheticalAccountLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    )
  }

  getXVSAddress(): Address {
    let result = super.call('getXVSAddress', 'getXVSAddress():(address)', [])

    return result[0].toAddress()
  }

  try_getXVSAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall('getXVSAddress', 'getXVSAddress():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  getXVSVTokenAddress(): Address {
    let result = super.call('getXVSVTokenAddress', 'getXVSVTokenAddress():(address)', [])

    return result[0].toAddress()
  }

  try_getXVSVTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      'getXVSVTokenAddress',
      'getXVSVTokenAddress():(address)',
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  isComptroller(): boolean {
    let result = super.call('isComptroller', 'isComptroller():(bool)', [])

    return result[0].toBoolean()
  }

  try_isComptroller(): ethereum.CallResult<boolean> {
    let result = super.tryCall('isComptroller', 'isComptroller():(bool)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  lastContributorBlock(param0: Address): BigInt {
    let result = super.call(
      'lastContributorBlock',
      'lastContributorBlock(address):(uint256)',
      [ethereum.Value.fromAddress(param0)],
    )

    return result[0].toBigInt()
  }

  try_lastContributorBlock(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'lastContributorBlock',
      'lastContributorBlock(address):(uint256)',
      [ethereum.Value.fromAddress(param0)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  liquidateBorrowAllowed(
    vTokenBorrowed: Address,
    vTokenCollateral: Address,
    liquidator: Address,
    borrower: Address,
    repayAmount: BigInt,
  ): BigInt {
    let result = super.call(
      'liquidateBorrowAllowed',
      'liquidateBorrowAllowed(address,address,address,address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(vTokenBorrowed),
        ethereum.Value.fromAddress(vTokenCollateral),
        ethereum.Value.fromAddress(liquidator),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount),
      ],
    )

    return result[0].toBigInt()
  }

  try_liquidateBorrowAllowed(
    vTokenBorrowed: Address,
    vTokenCollateral: Address,
    liquidator: Address,
    borrower: Address,
    repayAmount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'liquidateBorrowAllowed',
      'liquidateBorrowAllowed(address,address,address,address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(vTokenBorrowed),
        ethereum.Value.fromAddress(vTokenCollateral),
        ethereum.Value.fromAddress(liquidator),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount),
      ],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  liquidateCalculateSeizeTokens(
    vTokenBorrowed: Address,
    vTokenCollateral: Address,
    actualRepayAmount: BigInt,
  ): Comptroller__liquidateCalculateSeizeTokensResult {
    let result = super.call(
      'liquidateCalculateSeizeTokens',
      'liquidateCalculateSeizeTokens(address,address,uint256):(uint256,uint256)',
      [
        ethereum.Value.fromAddress(vTokenBorrowed),
        ethereum.Value.fromAddress(vTokenCollateral),
        ethereum.Value.fromUnsignedBigInt(actualRepayAmount),
      ],
    )

    return new Comptroller__liquidateCalculateSeizeTokensResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    )
  }

  try_liquidateCalculateSeizeTokens(
    vTokenBorrowed: Address,
    vTokenCollateral: Address,
    actualRepayAmount: BigInt,
  ): ethereum.CallResult<Comptroller__liquidateCalculateSeizeTokensResult> {
    let result = super.tryCall(
      'liquidateCalculateSeizeTokens',
      'liquidateCalculateSeizeTokens(address,address,uint256):(uint256,uint256)',
      [
        ethereum.Value.fromAddress(vTokenBorrowed),
        ethereum.Value.fromAddress(vTokenCollateral),
        ethereum.Value.fromUnsignedBigInt(actualRepayAmount),
      ],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(
      new Comptroller__liquidateCalculateSeizeTokensResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    )
  }

  liquidateVAICalculateSeizeTokens(
    vTokenCollateral: Address,
    actualRepayAmount: BigInt,
  ): Comptroller__liquidateVAICalculateSeizeTokensResult {
    let result = super.call(
      'liquidateVAICalculateSeizeTokens',
      'liquidateVAICalculateSeizeTokens(address,uint256):(uint256,uint256)',
      [
        ethereum.Value.fromAddress(vTokenCollateral),
        ethereum.Value.fromUnsignedBigInt(actualRepayAmount),
      ],
    )

    return new Comptroller__liquidateVAICalculateSeizeTokensResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    )
  }

  try_liquidateVAICalculateSeizeTokens(
    vTokenCollateral: Address,
    actualRepayAmount: BigInt,
  ): ethereum.CallResult<Comptroller__liquidateVAICalculateSeizeTokensResult> {
    let result = super.tryCall(
      'liquidateVAICalculateSeizeTokens',
      'liquidateVAICalculateSeizeTokens(address,uint256):(uint256,uint256)',
      [
        ethereum.Value.fromAddress(vTokenCollateral),
        ethereum.Value.fromUnsignedBigInt(actualRepayAmount),
      ],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(
      new Comptroller__liquidateVAICalculateSeizeTokensResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    )
  }

  liquidationIncentiveMantissa(): BigInt {
    let result = super.call(
      'liquidationIncentiveMantissa',
      'liquidationIncentiveMantissa():(uint256)',
      [],
    )

    return result[0].toBigInt()
  }

  try_liquidationIncentiveMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'liquidationIncentiveMantissa',
      'liquidationIncentiveMantissa():(uint256)',
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  liquidatorContract(): Address {
    let result = super.call('liquidatorContract', 'liquidatorContract():(address)', [])

    return result[0].toAddress()
  }

  try_liquidatorContract(): ethereum.CallResult<Address> {
    let result = super.tryCall('liquidatorContract', 'liquidatorContract():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  markets(param0: Address): Comptroller__marketsResult {
    let result = super.call('markets', 'markets(address):(bool,uint256,bool)', [
      ethereum.Value.fromAddress(param0),
    ])

    return new Comptroller__marketsResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBoolean(),
    )
  }

  try_markets(param0: Address): ethereum.CallResult<Comptroller__marketsResult> {
    let result = super.tryCall('markets', 'markets(address):(bool,uint256,bool)', [
      ethereum.Value.fromAddress(param0),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(
      new Comptroller__marketsResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBoolean(),
      ),
    )
  }

  maxAssets(): BigInt {
    let result = super.call('maxAssets', 'maxAssets():(uint256)', [])

    return result[0].toBigInt()
  }

  try_maxAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('maxAssets', 'maxAssets():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  minReleaseAmount(): BigInt {
    let result = super.call('minReleaseAmount', 'minReleaseAmount():(uint256)', [])

    return result[0].toBigInt()
  }

  try_minReleaseAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('minReleaseAmount', 'minReleaseAmount():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  mintAllowed(vToken: Address, minter: Address, mintAmount: BigInt): BigInt {
    let result = super.call(
      'mintAllowed',
      'mintAllowed(address,address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(vToken),
        ethereum.Value.fromAddress(minter),
        ethereum.Value.fromUnsignedBigInt(mintAmount),
      ],
    )

    return result[0].toBigInt()
  }

  try_mintAllowed(
    vToken: Address,
    minter: Address,
    mintAmount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'mintAllowed',
      'mintAllowed(address,address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(vToken),
        ethereum.Value.fromAddress(minter),
        ethereum.Value.fromUnsignedBigInt(mintAmount),
      ],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  mintGuardianPaused(param0: Address): boolean {
    let result = super.call('mintGuardianPaused', 'mintGuardianPaused(address):(bool)', [
      ethereum.Value.fromAddress(param0),
    ])

    return result[0].toBoolean()
  }

  try_mintGuardianPaused(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'mintGuardianPaused',
      'mintGuardianPaused(address):(bool)',
      [ethereum.Value.fromAddress(param0)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  mintVAIGuardianPaused(): boolean {
    let result = super.call('mintVAIGuardianPaused', 'mintVAIGuardianPaused():(bool)', [])

    return result[0].toBoolean()
  }

  try_mintVAIGuardianPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'mintVAIGuardianPaused',
      'mintVAIGuardianPaused():(bool)',
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  mintedVAIs(param0: Address): BigInt {
    let result = super.call('mintedVAIs', 'mintedVAIs(address):(uint256)', [
      ethereum.Value.fromAddress(param0),
    ])

    return result[0].toBigInt()
  }

  try_mintedVAIs(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('mintedVAIs', 'mintedVAIs(address):(uint256)', [
      ethereum.Value.fromAddress(param0),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  oracle(): Address {
    let result = super.call('oracle', 'oracle():(address)', [])

    return result[0].toAddress()
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall('oracle', 'oracle():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  pauseGuardian(): Address {
    let result = super.call('pauseGuardian', 'pauseGuardian():(address)', [])

    return result[0].toAddress()
  }

  try_pauseGuardian(): ethereum.CallResult<Address> {
    let result = super.tryCall('pauseGuardian', 'pauseGuardian():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  pendingAdmin(): Address {
    let result = super.call('pendingAdmin', 'pendingAdmin():(address)', [])

    return result[0].toAddress()
  }

  try_pendingAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall('pendingAdmin', 'pendingAdmin():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  pendingComptrollerImplementation(): Address {
    let result = super.call(
      'pendingComptrollerImplementation',
      'pendingComptrollerImplementation():(address)',
      [],
    )

    return result[0].toAddress()
  }

  try_pendingComptrollerImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      'pendingComptrollerImplementation',
      'pendingComptrollerImplementation():(address)',
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  protocolPaused(): boolean {
    let result = super.call('protocolPaused', 'protocolPaused():(bool)', [])

    return result[0].toBoolean()
  }

  try_protocolPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall('protocolPaused', 'protocolPaused():(bool)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  redeemAllowed(vToken: Address, redeemer: Address, redeemTokens: BigInt): BigInt {
    let result = super.call(
      'redeemAllowed',
      'redeemAllowed(address,address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(vToken),
        ethereum.Value.fromAddress(redeemer),
        ethereum.Value.fromUnsignedBigInt(redeemTokens),
      ],
    )

    return result[0].toBigInt()
  }

  try_redeemAllowed(
    vToken: Address,
    redeemer: Address,
    redeemTokens: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'redeemAllowed',
      'redeemAllowed(address,address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(vToken),
        ethereum.Value.fromAddress(redeemer),
        ethereum.Value.fromUnsignedBigInt(redeemTokens),
      ],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  releaseStartBlock(): BigInt {
    let result = super.call('releaseStartBlock', 'releaseStartBlock():(uint256)', [])

    return result[0].toBigInt()
  }

  try_releaseStartBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('releaseStartBlock', 'releaseStartBlock():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  repayBorrowAllowed(
    vToken: Address,
    payer: Address,
    borrower: Address,
    repayAmount: BigInt,
  ): BigInt {
    let result = super.call(
      'repayBorrowAllowed',
      'repayBorrowAllowed(address,address,address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(vToken),
        ethereum.Value.fromAddress(payer),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount),
      ],
    )

    return result[0].toBigInt()
  }

  try_repayBorrowAllowed(
    vToken: Address,
    payer: Address,
    borrower: Address,
    repayAmount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'repayBorrowAllowed',
      'repayBorrowAllowed(address,address,address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(vToken),
        ethereum.Value.fromAddress(payer),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount),
      ],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  repayVAIGuardianPaused(): boolean {
    let result = super.call(
      'repayVAIGuardianPaused',
      'repayVAIGuardianPaused():(bool)',
      [],
    )

    return result[0].toBoolean()
  }

  try_repayVAIGuardianPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'repayVAIGuardianPaused',
      'repayVAIGuardianPaused():(bool)',
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  seizeAllowed(
    vTokenCollateral: Address,
    vTokenBorrowed: Address,
    liquidator: Address,
    borrower: Address,
    seizeTokens: BigInt,
  ): BigInt {
    let result = super.call(
      'seizeAllowed',
      'seizeAllowed(address,address,address,address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(vTokenCollateral),
        ethereum.Value.fromAddress(vTokenBorrowed),
        ethereum.Value.fromAddress(liquidator),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(seizeTokens),
      ],
    )

    return result[0].toBigInt()
  }

  try_seizeAllowed(
    vTokenCollateral: Address,
    vTokenBorrowed: Address,
    liquidator: Address,
    borrower: Address,
    seizeTokens: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'seizeAllowed',
      'seizeAllowed(address,address,address,address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(vTokenCollateral),
        ethereum.Value.fromAddress(vTokenBorrowed),
        ethereum.Value.fromAddress(liquidator),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(seizeTokens),
      ],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  seizeGuardianPaused(): boolean {
    let result = super.call('seizeGuardianPaused', 'seizeGuardianPaused():(bool)', [])

    return result[0].toBoolean()
  }

  try_seizeGuardianPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall('seizeGuardianPaused', 'seizeGuardianPaused():(bool)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  setMintedVAIOf(owner: Address, amount: BigInt): BigInt {
    let result = super.call(
      'setMintedVAIOf',
      'setMintedVAIOf(address,uint256):(uint256)',
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromUnsignedBigInt(amount)],
    )

    return result[0].toBigInt()
  }

  try_setMintedVAIOf(owner: Address, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'setMintedVAIOf',
      'setMintedVAIOf(address,uint256):(uint256)',
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromUnsignedBigInt(amount)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  transferAllowed(
    vToken: Address,
    src: Address,
    dst: Address,
    transferTokens: BigInt,
  ): BigInt {
    let result = super.call(
      'transferAllowed',
      'transferAllowed(address,address,address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(vToken),
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(transferTokens),
      ],
    )

    return result[0].toBigInt()
  }

  try_transferAllowed(
    vToken: Address,
    src: Address,
    dst: Address,
    transferTokens: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'transferAllowed',
      'transferAllowed(address,address,address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(vToken),
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(transferTokens),
      ],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  transferGuardianPaused(): boolean {
    let result = super.call(
      'transferGuardianPaused',
      'transferGuardianPaused():(bool)',
      [],
    )

    return result[0].toBoolean()
  }

  try_transferGuardianPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'transferGuardianPaused',
      'transferGuardianPaused():(bool)',
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  treasuryAddress(): Address {
    let result = super.call('treasuryAddress', 'treasuryAddress():(address)', [])

    return result[0].toAddress()
  }

  try_treasuryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall('treasuryAddress', 'treasuryAddress():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  treasuryGuardian(): Address {
    let result = super.call('treasuryGuardian', 'treasuryGuardian():(address)', [])

    return result[0].toAddress()
  }

  try_treasuryGuardian(): ethereum.CallResult<Address> {
    let result = super.tryCall('treasuryGuardian', 'treasuryGuardian():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  treasuryPercent(): BigInt {
    let result = super.call('treasuryPercent', 'treasuryPercent():(uint256)', [])

    return result[0].toBigInt()
  }

  try_treasuryPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('treasuryPercent', 'treasuryPercent():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  vaiController(): Address {
    let result = super.call('vaiController', 'vaiController():(address)', [])

    return result[0].toAddress()
  }

  try_vaiController(): ethereum.CallResult<Address> {
    let result = super.tryCall('vaiController', 'vaiController():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  vaiMintRate(): BigInt {
    let result = super.call('vaiMintRate', 'vaiMintRate():(uint256)', [])

    return result[0].toBigInt()
  }

  try_vaiMintRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('vaiMintRate', 'vaiMintRate():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  vaiVaultAddress(): Address {
    let result = super.call('vaiVaultAddress', 'vaiVaultAddress():(address)', [])

    return result[0].toAddress()
  }

  try_vaiVaultAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall('vaiVaultAddress', 'vaiVaultAddress():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  venusAccrued(param0: Address): BigInt {
    let result = super.call('venusAccrued', 'venusAccrued(address):(uint256)', [
      ethereum.Value.fromAddress(param0),
    ])

    return result[0].toBigInt()
  }

  try_venusAccrued(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('venusAccrued', 'venusAccrued(address):(uint256)', [
      ethereum.Value.fromAddress(param0),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  venusBorrowState(param0: Address): Comptroller__venusBorrowStateResult {
    let result = super.call(
      'venusBorrowState',
      'venusBorrowState(address):(uint224,uint32)',
      [ethereum.Value.fromAddress(param0)],
    )

    return new Comptroller__venusBorrowStateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    )
  }

  try_venusBorrowState(
    param0: Address,
  ): ethereum.CallResult<Comptroller__venusBorrowStateResult> {
    let result = super.tryCall(
      'venusBorrowState',
      'venusBorrowState(address):(uint224,uint32)',
      [ethereum.Value.fromAddress(param0)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(
      new Comptroller__venusBorrowStateResult(value[0].toBigInt(), value[1].toBigInt()),
    )
  }

  venusBorrowerIndex(param0: Address, param1: Address): BigInt {
    let result = super.call(
      'venusBorrowerIndex',
      'venusBorrowerIndex(address,address):(uint256)',
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    )

    return result[0].toBigInt()
  }

  try_venusBorrowerIndex(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'venusBorrowerIndex',
      'venusBorrowerIndex(address,address):(uint256)',
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  venusContributorSpeeds(param0: Address): BigInt {
    let result = super.call(
      'venusContributorSpeeds',
      'venusContributorSpeeds(address):(uint256)',
      [ethereum.Value.fromAddress(param0)],
    )

    return result[0].toBigInt()
  }

  try_venusContributorSpeeds(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'venusContributorSpeeds',
      'venusContributorSpeeds(address):(uint256)',
      [ethereum.Value.fromAddress(param0)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  venusInitialIndex(): BigInt {
    let result = super.call('venusInitialIndex', 'venusInitialIndex():(uint224)', [])

    return result[0].toBigInt()
  }

  try_venusInitialIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('venusInitialIndex', 'venusInitialIndex():(uint224)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  venusRate(): BigInt {
    let result = super.call('venusRate', 'venusRate():(uint256)', [])

    return result[0].toBigInt()
  }

  try_venusRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('venusRate', 'venusRate():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  venusSpeeds(param0: Address): BigInt {
    let result = super.call('venusSpeeds', 'venusSpeeds(address):(uint256)', [
      ethereum.Value.fromAddress(param0),
    ])

    return result[0].toBigInt()
  }

  try_venusSpeeds(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('venusSpeeds', 'venusSpeeds(address):(uint256)', [
      ethereum.Value.fromAddress(param0),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  venusSupplierIndex(param0: Address, param1: Address): BigInt {
    let result = super.call(
      'venusSupplierIndex',
      'venusSupplierIndex(address,address):(uint256)',
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    )

    return result[0].toBigInt()
  }

  try_venusSupplierIndex(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'venusSupplierIndex',
      'venusSupplierIndex(address,address):(uint256)',
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  venusSupplyState(param0: Address): Comptroller__venusSupplyStateResult {
    let result = super.call(
      'venusSupplyState',
      'venusSupplyState(address):(uint224,uint32)',
      [ethereum.Value.fromAddress(param0)],
    )

    return new Comptroller__venusSupplyStateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    )
  }

  try_venusSupplyState(
    param0: Address,
  ): ethereum.CallResult<Comptroller__venusSupplyStateResult> {
    let result = super.tryCall(
      'venusSupplyState',
      'venusSupplyState(address):(uint224,uint32)',
      [ethereum.Value.fromAddress(param0)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(
      new Comptroller__venusSupplyStateResult(value[0].toBigInt(), value[1].toBigInt()),
    )
  }

  venusVAIRate(): BigInt {
    let result = super.call('venusVAIRate', 'venusVAIRate():(uint256)', [])

    return result[0].toBigInt()
  }

  try_venusVAIRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('venusVAIRate', 'venusVAIRate():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  venusVAIVaultRate(): BigInt {
    let result = super.call('venusVAIVaultRate', 'venusVAIVaultRate():(uint256)', [])

    return result[0].toBigInt()
  }

  try_venusVAIVaultRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('venusVAIVaultRate', 'venusVAIVaultRate():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this)
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this)
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall

  constructor(call: ConstructorCall) {
    this._call = call
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall

  constructor(call: ConstructorCall) {
    this._call = call
  }
}

export class _becomeCall extends ethereum.Call {
  get inputs(): _becomeCall__Inputs {
    return new _becomeCall__Inputs(this)
  }

  get outputs(): _becomeCall__Outputs {
    return new _becomeCall__Outputs(this)
  }
}

export class _becomeCall__Inputs {
  _call: _becomeCall

  constructor(call: _becomeCall) {
    this._call = call
  }

  get unitroller(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class _becomeCall__Outputs {
  _call: _becomeCall

  constructor(call: _becomeCall) {
    this._call = call
  }
}

export class _grantXVSCall extends ethereum.Call {
  get inputs(): _grantXVSCall__Inputs {
    return new _grantXVSCall__Inputs(this)
  }

  get outputs(): _grantXVSCall__Outputs {
    return new _grantXVSCall__Outputs(this)
  }
}

export class _grantXVSCall__Inputs {
  _call: _grantXVSCall

  constructor(call: _grantXVSCall) {
    this._call = call
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }
}

export class _grantXVSCall__Outputs {
  _call: _grantXVSCall

  constructor(call: _grantXVSCall) {
    this._call = call
  }
}

export class _setBorrowCapGuardianCall extends ethereum.Call {
  get inputs(): _setBorrowCapGuardianCall__Inputs {
    return new _setBorrowCapGuardianCall__Inputs(this)
  }

  get outputs(): _setBorrowCapGuardianCall__Outputs {
    return new _setBorrowCapGuardianCall__Outputs(this)
  }
}

export class _setBorrowCapGuardianCall__Inputs {
  _call: _setBorrowCapGuardianCall

  constructor(call: _setBorrowCapGuardianCall) {
    this._call = call
  }

  get newBorrowCapGuardian(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class _setBorrowCapGuardianCall__Outputs {
  _call: _setBorrowCapGuardianCall

  constructor(call: _setBorrowCapGuardianCall) {
    this._call = call
  }
}

export class _setCloseFactorCall extends ethereum.Call {
  get inputs(): _setCloseFactorCall__Inputs {
    return new _setCloseFactorCall__Inputs(this)
  }

  get outputs(): _setCloseFactorCall__Outputs {
    return new _setCloseFactorCall__Outputs(this)
  }
}

export class _setCloseFactorCall__Inputs {
  _call: _setCloseFactorCall

  constructor(call: _setCloseFactorCall) {
    this._call = call
  }

  get newCloseFactorMantissa(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }
}

export class _setCloseFactorCall__Outputs {
  _call: _setCloseFactorCall

  constructor(call: _setCloseFactorCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class _setCollateralFactorCall extends ethereum.Call {
  get inputs(): _setCollateralFactorCall__Inputs {
    return new _setCollateralFactorCall__Inputs(this)
  }

  get outputs(): _setCollateralFactorCall__Outputs {
    return new _setCollateralFactorCall__Outputs(this)
  }
}

export class _setCollateralFactorCall__Inputs {
  _call: _setCollateralFactorCall

  constructor(call: _setCollateralFactorCall) {
    this._call = call
  }

  get vToken(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get newCollateralFactorMantissa(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }
}

export class _setCollateralFactorCall__Outputs {
  _call: _setCollateralFactorCall

  constructor(call: _setCollateralFactorCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class _setComptrollerLensCall extends ethereum.Call {
  get inputs(): _setComptrollerLensCall__Inputs {
    return new _setComptrollerLensCall__Inputs(this)
  }

  get outputs(): _setComptrollerLensCall__Outputs {
    return new _setComptrollerLensCall__Outputs(this)
  }
}

export class _setComptrollerLensCall__Inputs {
  _call: _setComptrollerLensCall

  constructor(call: _setComptrollerLensCall) {
    this._call = call
  }

  get comptrollerLens_(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class _setComptrollerLensCall__Outputs {
  _call: _setComptrollerLensCall

  constructor(call: _setComptrollerLensCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class _setLiquidationIncentiveCall extends ethereum.Call {
  get inputs(): _setLiquidationIncentiveCall__Inputs {
    return new _setLiquidationIncentiveCall__Inputs(this)
  }

  get outputs(): _setLiquidationIncentiveCall__Outputs {
    return new _setLiquidationIncentiveCall__Outputs(this)
  }
}

export class _setLiquidationIncentiveCall__Inputs {
  _call: _setLiquidationIncentiveCall

  constructor(call: _setLiquidationIncentiveCall) {
    this._call = call
  }

  get newLiquidationIncentiveMantissa(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }
}

export class _setLiquidationIncentiveCall__Outputs {
  _call: _setLiquidationIncentiveCall

  constructor(call: _setLiquidationIncentiveCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class _setLiquidatorContractCall extends ethereum.Call {
  get inputs(): _setLiquidatorContractCall__Inputs {
    return new _setLiquidatorContractCall__Inputs(this)
  }

  get outputs(): _setLiquidatorContractCall__Outputs {
    return new _setLiquidatorContractCall__Outputs(this)
  }
}

export class _setLiquidatorContractCall__Inputs {
  _call: _setLiquidatorContractCall

  constructor(call: _setLiquidatorContractCall) {
    this._call = call
  }

  get newLiquidatorContract_(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class _setLiquidatorContractCall__Outputs {
  _call: _setLiquidatorContractCall

  constructor(call: _setLiquidatorContractCall) {
    this._call = call
  }
}

export class _setMarketBorrowCapsCall extends ethereum.Call {
  get inputs(): _setMarketBorrowCapsCall__Inputs {
    return new _setMarketBorrowCapsCall__Inputs(this)
  }

  get outputs(): _setMarketBorrowCapsCall__Outputs {
    return new _setMarketBorrowCapsCall__Outputs(this)
  }
}

export class _setMarketBorrowCapsCall__Inputs {
  _call: _setMarketBorrowCapsCall

  constructor(call: _setMarketBorrowCapsCall) {
    this._call = call
  }

  get vTokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray()
  }

  get newBorrowCaps(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray()
  }
}

export class _setMarketBorrowCapsCall__Outputs {
  _call: _setMarketBorrowCapsCall

  constructor(call: _setMarketBorrowCapsCall) {
    this._call = call
  }
}

export class _setPauseGuardianCall extends ethereum.Call {
  get inputs(): _setPauseGuardianCall__Inputs {
    return new _setPauseGuardianCall__Inputs(this)
  }

  get outputs(): _setPauseGuardianCall__Outputs {
    return new _setPauseGuardianCall__Outputs(this)
  }
}

export class _setPauseGuardianCall__Inputs {
  _call: _setPauseGuardianCall

  constructor(call: _setPauseGuardianCall) {
    this._call = call
  }

  get newPauseGuardian(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class _setPauseGuardianCall__Outputs {
  _call: _setPauseGuardianCall

  constructor(call: _setPauseGuardianCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class _setPriceOracleCall extends ethereum.Call {
  get inputs(): _setPriceOracleCall__Inputs {
    return new _setPriceOracleCall__Inputs(this)
  }

  get outputs(): _setPriceOracleCall__Outputs {
    return new _setPriceOracleCall__Outputs(this)
  }
}

export class _setPriceOracleCall__Inputs {
  _call: _setPriceOracleCall

  constructor(call: _setPriceOracleCall) {
    this._call = call
  }

  get newOracle(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class _setPriceOracleCall__Outputs {
  _call: _setPriceOracleCall

  constructor(call: _setPriceOracleCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class _setProtocolPausedCall extends ethereum.Call {
  get inputs(): _setProtocolPausedCall__Inputs {
    return new _setProtocolPausedCall__Inputs(this)
  }

  get outputs(): _setProtocolPausedCall__Outputs {
    return new _setProtocolPausedCall__Outputs(this)
  }
}

export class _setProtocolPausedCall__Inputs {
  _call: _setProtocolPausedCall

  constructor(call: _setProtocolPausedCall) {
    this._call = call
  }

  get state(): boolean {
    return this._call.inputValues[0].value.toBoolean()
  }
}

export class _setProtocolPausedCall__Outputs {
  _call: _setProtocolPausedCall

  constructor(call: _setProtocolPausedCall) {
    this._call = call
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean()
  }
}

export class _setTreasuryDataCall extends ethereum.Call {
  get inputs(): _setTreasuryDataCall__Inputs {
    return new _setTreasuryDataCall__Inputs(this)
  }

  get outputs(): _setTreasuryDataCall__Outputs {
    return new _setTreasuryDataCall__Outputs(this)
  }
}

export class _setTreasuryDataCall__Inputs {
  _call: _setTreasuryDataCall

  constructor(call: _setTreasuryDataCall) {
    this._call = call
  }

  get newTreasuryGuardian(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get newTreasuryAddress(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get newTreasuryPercent(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }
}

export class _setTreasuryDataCall__Outputs {
  _call: _setTreasuryDataCall

  constructor(call: _setTreasuryDataCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class _setVAIControllerCall extends ethereum.Call {
  get inputs(): _setVAIControllerCall__Inputs {
    return new _setVAIControllerCall__Inputs(this)
  }

  get outputs(): _setVAIControllerCall__Outputs {
    return new _setVAIControllerCall__Outputs(this)
  }
}

export class _setVAIControllerCall__Inputs {
  _call: _setVAIControllerCall

  constructor(call: _setVAIControllerCall) {
    this._call = call
  }

  get vaiController_(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class _setVAIControllerCall__Outputs {
  _call: _setVAIControllerCall

  constructor(call: _setVAIControllerCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class _setVAIMintRateCall extends ethereum.Call {
  get inputs(): _setVAIMintRateCall__Inputs {
    return new _setVAIMintRateCall__Inputs(this)
  }

  get outputs(): _setVAIMintRateCall__Outputs {
    return new _setVAIMintRateCall__Outputs(this)
  }
}

export class _setVAIMintRateCall__Inputs {
  _call: _setVAIMintRateCall

  constructor(call: _setVAIMintRateCall) {
    this._call = call
  }

  get newVAIMintRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }
}

export class _setVAIMintRateCall__Outputs {
  _call: _setVAIMintRateCall

  constructor(call: _setVAIMintRateCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class _setVAIVaultInfoCall extends ethereum.Call {
  get inputs(): _setVAIVaultInfoCall__Inputs {
    return new _setVAIVaultInfoCall__Inputs(this)
  }

  get outputs(): _setVAIVaultInfoCall__Outputs {
    return new _setVAIVaultInfoCall__Outputs(this)
  }
}

export class _setVAIVaultInfoCall__Inputs {
  _call: _setVAIVaultInfoCall

  constructor(call: _setVAIVaultInfoCall) {
    this._call = call
  }

  get vault_(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get releaseStartBlock_(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }

  get minReleaseAmount_(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }
}

export class _setVAIVaultInfoCall__Outputs {
  _call: _setVAIVaultInfoCall

  constructor(call: _setVAIVaultInfoCall) {
    this._call = call
  }
}

export class _setVenusSpeedCall extends ethereum.Call {
  get inputs(): _setVenusSpeedCall__Inputs {
    return new _setVenusSpeedCall__Inputs(this)
  }

  get outputs(): _setVenusSpeedCall__Outputs {
    return new _setVenusSpeedCall__Outputs(this)
  }
}

export class _setVenusSpeedCall__Inputs {
  _call: _setVenusSpeedCall

  constructor(call: _setVenusSpeedCall) {
    this._call = call
  }

  get vToken(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get venusSpeed(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }
}

export class _setVenusSpeedCall__Outputs {
  _call: _setVenusSpeedCall

  constructor(call: _setVenusSpeedCall) {
    this._call = call
  }
}

export class _setVenusVAIVaultRateCall extends ethereum.Call {
  get inputs(): _setVenusVAIVaultRateCall__Inputs {
    return new _setVenusVAIVaultRateCall__Inputs(this)
  }

  get outputs(): _setVenusVAIVaultRateCall__Outputs {
    return new _setVenusVAIVaultRateCall__Outputs(this)
  }
}

export class _setVenusVAIVaultRateCall__Inputs {
  _call: _setVenusVAIVaultRateCall

  constructor(call: _setVenusVAIVaultRateCall) {
    this._call = call
  }

  get venusVAIVaultRate_(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }
}

export class _setVenusVAIVaultRateCall__Outputs {
  _call: _setVenusVAIVaultRateCall

  constructor(call: _setVenusVAIVaultRateCall) {
    this._call = call
  }
}

export class _supportMarketCall extends ethereum.Call {
  get inputs(): _supportMarketCall__Inputs {
    return new _supportMarketCall__Inputs(this)
  }

  get outputs(): _supportMarketCall__Outputs {
    return new _supportMarketCall__Outputs(this)
  }
}

export class _supportMarketCall__Inputs {
  _call: _supportMarketCall

  constructor(call: _supportMarketCall) {
    this._call = call
  }

  get vToken(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class _supportMarketCall__Outputs {
  _call: _supportMarketCall

  constructor(call: _supportMarketCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class BorrowAllowedCall extends ethereum.Call {
  get inputs(): BorrowAllowedCall__Inputs {
    return new BorrowAllowedCall__Inputs(this)
  }

  get outputs(): BorrowAllowedCall__Outputs {
    return new BorrowAllowedCall__Outputs(this)
  }
}

export class BorrowAllowedCall__Inputs {
  _call: BorrowAllowedCall

  constructor(call: BorrowAllowedCall) {
    this._call = call
  }

  get vToken(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get borrower(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get borrowAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }
}

export class BorrowAllowedCall__Outputs {
  _call: BorrowAllowedCall

  constructor(call: BorrowAllowedCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class BorrowVerifyCall extends ethereum.Call {
  get inputs(): BorrowVerifyCall__Inputs {
    return new BorrowVerifyCall__Inputs(this)
  }

  get outputs(): BorrowVerifyCall__Outputs {
    return new BorrowVerifyCall__Outputs(this)
  }
}

export class BorrowVerifyCall__Inputs {
  _call: BorrowVerifyCall

  constructor(call: BorrowVerifyCall) {
    this._call = call
  }

  get vToken(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get borrower(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get borrowAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }
}

export class BorrowVerifyCall__Outputs {
  _call: BorrowVerifyCall

  constructor(call: BorrowVerifyCall) {
    this._call = call
  }
}

export class ClaimVenusCall extends ethereum.Call {
  get inputs(): ClaimVenusCall__Inputs {
    return new ClaimVenusCall__Inputs(this)
  }

  get outputs(): ClaimVenusCall__Outputs {
    return new ClaimVenusCall__Outputs(this)
  }
}

export class ClaimVenusCall__Inputs {
  _call: ClaimVenusCall

  constructor(call: ClaimVenusCall) {
    this._call = call
  }

  get holders(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray()
  }

  get vTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray()
  }

  get borrowers(): boolean {
    return this._call.inputValues[2].value.toBoolean()
  }

  get suppliers(): boolean {
    return this._call.inputValues[3].value.toBoolean()
  }

  get collateral(): boolean {
    return this._call.inputValues[4].value.toBoolean()
  }
}

export class ClaimVenusCall__Outputs {
  _call: ClaimVenusCall

  constructor(call: ClaimVenusCall) {
    this._call = call
  }
}

export class ClaimVenus1Call extends ethereum.Call {
  get inputs(): ClaimVenus1Call__Inputs {
    return new ClaimVenus1Call__Inputs(this)
  }

  get outputs(): ClaimVenus1Call__Outputs {
    return new ClaimVenus1Call__Outputs(this)
  }
}

export class ClaimVenus1Call__Inputs {
  _call: ClaimVenus1Call

  constructor(call: ClaimVenus1Call) {
    this._call = call
  }

  get holder(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get vTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray()
  }
}

export class ClaimVenus1Call__Outputs {
  _call: ClaimVenus1Call

  constructor(call: ClaimVenus1Call) {
    this._call = call
  }
}

export class ClaimVenus2Call extends ethereum.Call {
  get inputs(): ClaimVenus2Call__Inputs {
    return new ClaimVenus2Call__Inputs(this)
  }

  get outputs(): ClaimVenus2Call__Outputs {
    return new ClaimVenus2Call__Outputs(this)
  }
}

export class ClaimVenus2Call__Inputs {
  _call: ClaimVenus2Call

  constructor(call: ClaimVenus2Call) {
    this._call = call
  }

  get holder(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class ClaimVenus2Call__Outputs {
  _call: ClaimVenus2Call

  constructor(call: ClaimVenus2Call) {
    this._call = call
  }
}

export class ClaimVenus3Call extends ethereum.Call {
  get inputs(): ClaimVenus3Call__Inputs {
    return new ClaimVenus3Call__Inputs(this)
  }

  get outputs(): ClaimVenus3Call__Outputs {
    return new ClaimVenus3Call__Outputs(this)
  }
}

export class ClaimVenus3Call__Inputs {
  _call: ClaimVenus3Call

  constructor(call: ClaimVenus3Call) {
    this._call = call
  }

  get holders(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray()
  }

  get vTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray()
  }

  get borrowers(): boolean {
    return this._call.inputValues[2].value.toBoolean()
  }

  get suppliers(): boolean {
    return this._call.inputValues[3].value.toBoolean()
  }
}

export class ClaimVenus3Call__Outputs {
  _call: ClaimVenus3Call

  constructor(call: ClaimVenus3Call) {
    this._call = call
  }
}

export class ClaimVenusAsCollateralCall extends ethereum.Call {
  get inputs(): ClaimVenusAsCollateralCall__Inputs {
    return new ClaimVenusAsCollateralCall__Inputs(this)
  }

  get outputs(): ClaimVenusAsCollateralCall__Outputs {
    return new ClaimVenusAsCollateralCall__Outputs(this)
  }
}

export class ClaimVenusAsCollateralCall__Inputs {
  _call: ClaimVenusAsCollateralCall

  constructor(call: ClaimVenusAsCollateralCall) {
    this._call = call
  }

  get holder(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class ClaimVenusAsCollateralCall__Outputs {
  _call: ClaimVenusAsCollateralCall

  constructor(call: ClaimVenusAsCollateralCall) {
    this._call = call
  }
}

export class EnterMarketsCall extends ethereum.Call {
  get inputs(): EnterMarketsCall__Inputs {
    return new EnterMarketsCall__Inputs(this)
  }

  get outputs(): EnterMarketsCall__Outputs {
    return new EnterMarketsCall__Outputs(this)
  }
}

export class EnterMarketsCall__Inputs {
  _call: EnterMarketsCall

  constructor(call: EnterMarketsCall) {
    this._call = call
  }

  get vTokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray()
  }
}

export class EnterMarketsCall__Outputs {
  _call: EnterMarketsCall

  constructor(call: EnterMarketsCall) {
    this._call = call
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray()
  }
}

export class ExitMarketCall extends ethereum.Call {
  get inputs(): ExitMarketCall__Inputs {
    return new ExitMarketCall__Inputs(this)
  }

  get outputs(): ExitMarketCall__Outputs {
    return new ExitMarketCall__Outputs(this)
  }
}

export class ExitMarketCall__Inputs {
  _call: ExitMarketCall

  constructor(call: ExitMarketCall) {
    this._call = call
  }

  get vTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class ExitMarketCall__Outputs {
  _call: ExitMarketCall

  constructor(call: ExitMarketCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class LiquidateBorrowAllowedCall extends ethereum.Call {
  get inputs(): LiquidateBorrowAllowedCall__Inputs {
    return new LiquidateBorrowAllowedCall__Inputs(this)
  }

  get outputs(): LiquidateBorrowAllowedCall__Outputs {
    return new LiquidateBorrowAllowedCall__Outputs(this)
  }
}

export class LiquidateBorrowAllowedCall__Inputs {
  _call: LiquidateBorrowAllowedCall

  constructor(call: LiquidateBorrowAllowedCall) {
    this._call = call
  }

  get vTokenBorrowed(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get vTokenCollateral(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get liquidator(): Address {
    return this._call.inputValues[2].value.toAddress()
  }

  get borrower(): Address {
    return this._call.inputValues[3].value.toAddress()
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt()
  }
}

export class LiquidateBorrowAllowedCall__Outputs {
  _call: LiquidateBorrowAllowedCall

  constructor(call: LiquidateBorrowAllowedCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class LiquidateBorrowVerifyCall extends ethereum.Call {
  get inputs(): LiquidateBorrowVerifyCall__Inputs {
    return new LiquidateBorrowVerifyCall__Inputs(this)
  }

  get outputs(): LiquidateBorrowVerifyCall__Outputs {
    return new LiquidateBorrowVerifyCall__Outputs(this)
  }
}

export class LiquidateBorrowVerifyCall__Inputs {
  _call: LiquidateBorrowVerifyCall

  constructor(call: LiquidateBorrowVerifyCall) {
    this._call = call
  }

  get vTokenBorrowed(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get vTokenCollateral(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get liquidator(): Address {
    return this._call.inputValues[2].value.toAddress()
  }

  get borrower(): Address {
    return this._call.inputValues[3].value.toAddress()
  }

  get actualRepayAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt()
  }

  get seizeTokens(): BigInt {
    return this._call.inputValues[5].value.toBigInt()
  }
}

export class LiquidateBorrowVerifyCall__Outputs {
  _call: LiquidateBorrowVerifyCall

  constructor(call: LiquidateBorrowVerifyCall) {
    this._call = call
  }
}

export class MintAllowedCall extends ethereum.Call {
  get inputs(): MintAllowedCall__Inputs {
    return new MintAllowedCall__Inputs(this)
  }

  get outputs(): MintAllowedCall__Outputs {
    return new MintAllowedCall__Outputs(this)
  }
}

export class MintAllowedCall__Inputs {
  _call: MintAllowedCall

  constructor(call: MintAllowedCall) {
    this._call = call
  }

  get vToken(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get minter(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get mintAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }
}

export class MintAllowedCall__Outputs {
  _call: MintAllowedCall

  constructor(call: MintAllowedCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class MintVerifyCall extends ethereum.Call {
  get inputs(): MintVerifyCall__Inputs {
    return new MintVerifyCall__Inputs(this)
  }

  get outputs(): MintVerifyCall__Outputs {
    return new MintVerifyCall__Outputs(this)
  }
}

export class MintVerifyCall__Inputs {
  _call: MintVerifyCall

  constructor(call: MintVerifyCall) {
    this._call = call
  }

  get vToken(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get minter(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get actualMintAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }

  get mintTokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt()
  }
}

export class MintVerifyCall__Outputs {
  _call: MintVerifyCall

  constructor(call: MintVerifyCall) {
    this._call = call
  }
}

export class RedeemAllowedCall extends ethereum.Call {
  get inputs(): RedeemAllowedCall__Inputs {
    return new RedeemAllowedCall__Inputs(this)
  }

  get outputs(): RedeemAllowedCall__Outputs {
    return new RedeemAllowedCall__Outputs(this)
  }
}

export class RedeemAllowedCall__Inputs {
  _call: RedeemAllowedCall

  constructor(call: RedeemAllowedCall) {
    this._call = call
  }

  get vToken(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get redeemer(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get redeemTokens(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }
}

export class RedeemAllowedCall__Outputs {
  _call: RedeemAllowedCall

  constructor(call: RedeemAllowedCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class RedeemVerifyCall extends ethereum.Call {
  get inputs(): RedeemVerifyCall__Inputs {
    return new RedeemVerifyCall__Inputs(this)
  }

  get outputs(): RedeemVerifyCall__Outputs {
    return new RedeemVerifyCall__Outputs(this)
  }
}

export class RedeemVerifyCall__Inputs {
  _call: RedeemVerifyCall

  constructor(call: RedeemVerifyCall) {
    this._call = call
  }

  get vToken(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get redeemer(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get redeemAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }

  get redeemTokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt()
  }
}

export class RedeemVerifyCall__Outputs {
  _call: RedeemVerifyCall

  constructor(call: RedeemVerifyCall) {
    this._call = call
  }
}

export class ReleaseToVaultCall extends ethereum.Call {
  get inputs(): ReleaseToVaultCall__Inputs {
    return new ReleaseToVaultCall__Inputs(this)
  }

  get outputs(): ReleaseToVaultCall__Outputs {
    return new ReleaseToVaultCall__Outputs(this)
  }
}

export class ReleaseToVaultCall__Inputs {
  _call: ReleaseToVaultCall

  constructor(call: ReleaseToVaultCall) {
    this._call = call
  }
}

export class ReleaseToVaultCall__Outputs {
  _call: ReleaseToVaultCall

  constructor(call: ReleaseToVaultCall) {
    this._call = call
  }
}

export class RepayBorrowAllowedCall extends ethereum.Call {
  get inputs(): RepayBorrowAllowedCall__Inputs {
    return new RepayBorrowAllowedCall__Inputs(this)
  }

  get outputs(): RepayBorrowAllowedCall__Outputs {
    return new RepayBorrowAllowedCall__Outputs(this)
  }
}

export class RepayBorrowAllowedCall__Inputs {
  _call: RepayBorrowAllowedCall

  constructor(call: RepayBorrowAllowedCall) {
    this._call = call
  }

  get vToken(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get payer(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get borrower(): Address {
    return this._call.inputValues[2].value.toAddress()
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt()
  }
}

export class RepayBorrowAllowedCall__Outputs {
  _call: RepayBorrowAllowedCall

  constructor(call: RepayBorrowAllowedCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class RepayBorrowVerifyCall extends ethereum.Call {
  get inputs(): RepayBorrowVerifyCall__Inputs {
    return new RepayBorrowVerifyCall__Inputs(this)
  }

  get outputs(): RepayBorrowVerifyCall__Outputs {
    return new RepayBorrowVerifyCall__Outputs(this)
  }
}

export class RepayBorrowVerifyCall__Inputs {
  _call: RepayBorrowVerifyCall

  constructor(call: RepayBorrowVerifyCall) {
    this._call = call
  }

  get vToken(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get payer(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get borrower(): Address {
    return this._call.inputValues[2].value.toAddress()
  }

  get actualRepayAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt()
  }

  get borrowerIndex(): BigInt {
    return this._call.inputValues[4].value.toBigInt()
  }
}

export class RepayBorrowVerifyCall__Outputs {
  _call: RepayBorrowVerifyCall

  constructor(call: RepayBorrowVerifyCall) {
    this._call = call
  }
}

export class SeizeAllowedCall extends ethereum.Call {
  get inputs(): SeizeAllowedCall__Inputs {
    return new SeizeAllowedCall__Inputs(this)
  }

  get outputs(): SeizeAllowedCall__Outputs {
    return new SeizeAllowedCall__Outputs(this)
  }
}

export class SeizeAllowedCall__Inputs {
  _call: SeizeAllowedCall

  constructor(call: SeizeAllowedCall) {
    this._call = call
  }

  get vTokenCollateral(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get vTokenBorrowed(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get liquidator(): Address {
    return this._call.inputValues[2].value.toAddress()
  }

  get borrower(): Address {
    return this._call.inputValues[3].value.toAddress()
  }

  get seizeTokens(): BigInt {
    return this._call.inputValues[4].value.toBigInt()
  }
}

export class SeizeAllowedCall__Outputs {
  _call: SeizeAllowedCall

  constructor(call: SeizeAllowedCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class SeizeVerifyCall extends ethereum.Call {
  get inputs(): SeizeVerifyCall__Inputs {
    return new SeizeVerifyCall__Inputs(this)
  }

  get outputs(): SeizeVerifyCall__Outputs {
    return new SeizeVerifyCall__Outputs(this)
  }
}

export class SeizeVerifyCall__Inputs {
  _call: SeizeVerifyCall

  constructor(call: SeizeVerifyCall) {
    this._call = call
  }

  get vTokenCollateral(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get vTokenBorrowed(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get liquidator(): Address {
    return this._call.inputValues[2].value.toAddress()
  }

  get borrower(): Address {
    return this._call.inputValues[3].value.toAddress()
  }

  get seizeTokens(): BigInt {
    return this._call.inputValues[4].value.toBigInt()
  }
}

export class SeizeVerifyCall__Outputs {
  _call: SeizeVerifyCall

  constructor(call: SeizeVerifyCall) {
    this._call = call
  }
}

export class SetMintedVAIOfCall extends ethereum.Call {
  get inputs(): SetMintedVAIOfCall__Inputs {
    return new SetMintedVAIOfCall__Inputs(this)
  }

  get outputs(): SetMintedVAIOfCall__Outputs {
    return new SetMintedVAIOfCall__Outputs(this)
  }
}

export class SetMintedVAIOfCall__Inputs {
  _call: SetMintedVAIOfCall

  constructor(call: SetMintedVAIOfCall) {
    this._call = call
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }
}

export class SetMintedVAIOfCall__Outputs {
  _call: SetMintedVAIOfCall

  constructor(call: SetMintedVAIOfCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class TransferAllowedCall extends ethereum.Call {
  get inputs(): TransferAllowedCall__Inputs {
    return new TransferAllowedCall__Inputs(this)
  }

  get outputs(): TransferAllowedCall__Outputs {
    return new TransferAllowedCall__Outputs(this)
  }
}

export class TransferAllowedCall__Inputs {
  _call: TransferAllowedCall

  constructor(call: TransferAllowedCall) {
    this._call = call
  }

  get vToken(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get src(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get dst(): Address {
    return this._call.inputValues[2].value.toAddress()
  }

  get transferTokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt()
  }
}

export class TransferAllowedCall__Outputs {
  _call: TransferAllowedCall

  constructor(call: TransferAllowedCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class TransferVerifyCall extends ethereum.Call {
  get inputs(): TransferVerifyCall__Inputs {
    return new TransferVerifyCall__Inputs(this)
  }

  get outputs(): TransferVerifyCall__Outputs {
    return new TransferVerifyCall__Outputs(this)
  }
}

export class TransferVerifyCall__Inputs {
  _call: TransferVerifyCall

  constructor(call: TransferVerifyCall) {
    this._call = call
  }

  get vToken(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get src(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get dst(): Address {
    return this._call.inputValues[2].value.toAddress()
  }

  get transferTokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt()
  }
}

export class TransferVerifyCall__Outputs {
  _call: TransferVerifyCall

  constructor(call: TransferVerifyCall) {
    this._call = call
  }
}
